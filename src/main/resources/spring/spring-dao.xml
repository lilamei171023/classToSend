<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--添加配置文件-->
    <!--<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
        <!--<property name="location" value="classpath:db.properties"/>-->
    <!--</bean>-->

    <!--配置外部数据源连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/test"/>
        <property name="username" value="root"/>
        <property name="password" value="a111"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>
    </bean>

    <!--配置SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--设置SqlSessionFactory数据源-->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:mapper/*Mapper.xml"/>
    </bean>


    <!--配置扫描Mapper-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.classroom.dao"/>
    </bean>





    <!--自定义Realm-->
    <!--<bean id="myRealm" class="com.classroom.shiro.ShiroDbRealm"/>-->

    <!--&lt;!&ndash;安全管理&ndash;&gt;-->
    <!--<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">-->
        <!--<property name="realm" ref="myRealm"></property>-->
    <!--</bean>-->

    <!--&lt;!&ndash;shiro 过滤器&ndash;&gt;-->
    <!--<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">-->
        <!--<property name="securityManager" ref="securityManager"/>-->
        <!--<property name="loginUrl" value="/login"/>-->
        <!--<property name="successUrl" value="/index"/>-->
        <!--<property name="unauthorizedUrl" value="/unauth"/>-->
        <!--<property name="filterChainDefinitions">-->
            <!--<value>-->
                <!--/commons/** = anon-->
                <!--/plugins/** = anon-->
                <!--/assets/** = anon-->
                <!--/css/** = anon-->
                <!--/js/** = anon-->
                <!--/img/** = anon-->
                <!--/fonts/** = anon-->
                <!--/bootstrap/** = anon-->
                <!--/login = anon-->
                <!--/interface/** = anon-->
                <!--/** = user-->

            <!--</value>-->
        <!--</property>-->
    <!--</bean>-->
    <!--&lt;!&ndash; 用户授权信息Cache &ndash;&gt;-->
    <!--<bean id="cacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />-->


    <!--&lt;!&ndash; 会话管理器 &ndash;&gt;-->
    <!--<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">-->
        <!--<property name="globalSessionTimeout" value="#{30 * 60 * 1000}"/>-->
        <!--<property name="sessionIdUrlRewritingEnabled" value="false"/>-->
    <!--</bean>-->


    <!--&lt;!&ndash; 在方法中 注入  securityManager ，进行代理控制 &ndash;&gt;-->
    <!--<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">-->
        <!--<property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>-->
        <!--<property name="arguments" ref="securityManager"/>-->
    <!--</bean>-->


    <!--&lt;!&ndash; 保证实现了Shiro内部lifecycle函数的bean执行 &ndash;&gt;-->
    <!--<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>-->


    <!--&lt;!&ndash; AOP式方法级权限检查 &ndash;&gt;-->
    <!--<bean-->
            <!--class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"-->
            <!--depends-on="lifecycleBeanPostProcessor">-->
        <!--<property name="proxyTargetClass" value="false" />-->
    <!--</bean>-->


    <!--&lt;!&ndash; 启用shrio授权注解拦截方式 &ndash;&gt;-->
    <!--<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">-->
        <!--<property name="securityManager" ref="securityManager"/>-->
    <!--</bean>-->







    <!-- 6、声明式事务管理 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 7、注解事务切面 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

</beans>